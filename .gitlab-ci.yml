stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:20.10.16-dind

build-server:
  stage: build
  image: docker:25.0.5
  services:
    - docker:25.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd server
    - docker build -t $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/server:latest .
    - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/server:latest
  only:
    - main
    - dev

build-client:
  stage: build
  image: docker:25.0.5
  services:
    - docker:25.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd client
    - docker build -t $CI_REGISTRY_IMAGE/client:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/client:latest .
    - docker push $CI_REGISTRY_IMAGE/client:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/client:latest
  only:
    - main
    - dev

deploy:
  stage: deploy
  image: alpine/kubectl:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying to Kubernetes..."
    - ssh $SERVER_USER@$SERVER_HOST "bash -c '
        if [ ! -d $APP_PATH ]; then
          git clone $CI_REPOSITORY_URL $APP_PATH
        fi
        cd $APP_PATH
        git pull origin main
        chmod +x k8s-deploy.sh
        ./k8s-deploy.sh
      '"
  only:
    - main
    - dev
  when: manual